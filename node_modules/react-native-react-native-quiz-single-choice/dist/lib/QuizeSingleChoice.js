import React from "react";
import { Animated, Dimensions, Text, View, } from "react-native";
import { AppButton, OppButton } from "./Buttons";
const { width } = Dimensions.get("window");
const QuizSingleChoice = ({ containerStyle, questionTitleStyle, responseStyle, responseTextStyle, selectedResponseStyle, selectedResponseTextStyle, nextButtonText, nextButtonStyle, nextButtonTextStyle, endButtonText, endButtonStyle, endButtonTextStyle, prevButtonText, prevButtonStyle, prevButtonTextStyle, buttonsContainerStyle, responseRequired, onEnd, data, }) => {
    const originalData = data;
    const [questions, setQuestions] = React.useState([
        ...originalData.sort((_) => Math.random() - 0.5),
    ]);
    const [currentIndex, setCurrentIndex] = React.useState(0);
    const animation = React.useRef(new Animated.Value(0)).current;
    const onAnswer = React.useCallback((_, response) => {
        const newQuestions = [...questions];
        const activeQuestion = { ...newQuestions[currentIndex] };
        activeQuestion.response = response;
        newQuestions[currentIndex] = activeQuestion;
        setQuestions(newQuestions);
    }, [questions, currentIndex]);
    const onNext = React.useCallback(() => {
        if (currentIndex === questions.length - 1) {
            handleEnd(questions);
        }
        else {
            setCurrentIndex(currentIndex + 1);
        }
    }, [currentIndex, questions]);
    const onPrev = React.useCallback(() => {
        if (currentIndex === 0)
            return;
        setCurrentIndex(currentIndex - 1);
    }, [currentIndex]);
    const handleEnd = React.useCallback((questions) => {
        let newData = [];
        var count=0;
        for (let q of questions) {
            if(q.answer===q.response){
                count+=1
            }
            newData.push({
               
                question: q.question,
                response: q.response,
                isRight: q.answer === q.response,
                answer: q.answer,
            });
        }
        onEnd(count);
    }, [questions]);
    React.useEffect(() => {
        Animated.spring(animation, {
            toValue: currentIndex,
            useNativeDriver: true,
        }).start();
    }, [currentIndex]);
    const translateX = questions.length > 1
        ? animation.interpolate({
            inputRange: questions.map((_, index) => index),
            outputRange: questions.map((_, index) => -index * width),
        })
        : 0;
    const isLast = currentIndex === questions.length - 1;
    const isFirst = currentIndex === 0;
    let nextDisabled = responseRequired
        ? !!!questions[currentIndex]?.response
        : false;
    return (React.createElement(View, { style: [
            { flex: 1, backgroundColor: "#FFF", paddingHorizontal: 15 },
            containerStyle,
        ] },
        React.createElement(Animated.View, { style: {
                flexDirection: "row",
                width: questions.length * width,
                transform: [{ translateX }],
            } }, questions.map((item, index) => (React.createElement(View, { key: index, style: { alignSelf: "center", width: width } },
            React.createElement(Question, { responseStyle: responseStyle, questionTitleStyle: questionTitleStyle, selectedResponseStyle: selectedResponseStyle, selectedResponseTextStyle: selectedResponseTextStyle, responseTextStyle: responseTextStyle, key: index, onAnswer: onAnswer, ...{ item } }))))),
        React.createElement(View, { style: [
                {
                    flexDirection: "row",
                    alignItems: "center",
                    paddingBottom: 15,
                    alignSelf: "center",
                    width: width - 50,
                    justifyContent: "space-between",
                },
                buttonsContainerStyle,
            ] },
            React.createElement(OppButton, { onPress: () => {
                    onPrev();
                }, disabled: isFirst, testID: "prev", containerStyle: {
                    width: "40%",
                    backgroundColor: "#F00",
                    ...prevButtonStyle,
                }, title: prevButtonText, titleStyle: [{ color: "#FFF" }, prevButtonTextStyle] }),
            React.createElement(OppButton, { onPress: () => {
                    onNext();
                }, testID: "next", disabled: nextDisabled, containerStyle: {
                    width: "40%",
                    backgroundColor: "#000",
                    ...(isLast ? endButtonStyle : nextButtonStyle),
                }, title: isLast ? endButtonText : nextButtonText, titleStyle: [
                    { color: "#FFF" },
                    isLast ? endButtonTextStyle : nextButtonTextStyle,
                ] }))));
};
export default QuizSingleChoice;
function getResposesKeys(item) {
    return Object.keys(item).filter((key) => !["question", "answer", "response"].includes(key));
}
function Question({ item, onAnswer, questionTitleStyle, responseStyle, responseTextStyle, selectedResponseStyle, selectedResponseTextStyle, }) {
    const responses = getResposesKeys(item);
    return (React.createElement(View, { style: { marginTop: 30, width: width - 50, alignItems: "center" } },
        React.createElement(Text, { style: [
                { textAlign: "center", fontWeight: "700", fontSize: 18 },
                questionTitleStyle,
            ] }, item.question),
        React.createElement(View, { style: { marginVertical: 15, width: "100%" } }, responses.map((r, i) => {
            let text = item[r];
            const select = item.response === text;
            return (React.createElement(QuestionItem, { key: i, text: text, responseTextStyle: select ? selectedResponseTextStyle : responseTextStyle, responseStyle: select ? selectedResponseStyle : responseStyle, onPress: () => {
                    onAnswer(item, text);
                } }));
        }))));
}
function QuestionItem({ text, onPress, disabled, responseStyle, responseTextStyle, }) {
    return (React.createElement(View, { style: { marginVertical: 15 } },
        React.createElement(AppButton, { title: text, disabled: disabled, testID: text, containerStyle: { backgroundColor: "#000", ...responseStyle }, width: "100%", onPress: onPress, titleStyle: { textTransform: "capitalize", ...responseTextStyle }, backgroundColor: "#000", titleColor: "#FFF" })));
}
